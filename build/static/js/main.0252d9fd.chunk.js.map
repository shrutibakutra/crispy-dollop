{"version":3,"sources":["utils/request.tsx","Services/employee.tsx","Services/company.tsx","Employess/index.tsx","CompanyList/index.tsx","Company/index.tsx","Datatable/index.tsx","LoginPage/index.tsx","RegisterPage/index.tsx","Routes/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BASE_URL","process","REACT_APP_BASE_URL","ResponseError","response","statusText","Error","parseJSON","status","json","checkStatus","error","request","url","options","a","fetch","headers","fetchResponse","createEmployee","data","method","body","JSON","stringify","alert","getAllEmployee","deleteEmployee","employee","employeeId","_id","updateEmployee","console","log","id","createCompany","deleteCompany","companyId","updateCompany","createUser","loginUser","getCompany","Employees","props","history","location","state","useState","employees","setEployees","edit","setEdit","updatedEmply","setToUpdateEmply","companies","setCompanies","check","setCheck","setChecked","formik","useFormik","initialValues","firstName","lastName","email","phone","company","onSubmit","values","service","employeeService","company_Service","companyService","useEffect","message","getData","co_id","forEach","element","name","_data","handleCreateEmployee","handleChange","_employees","index","handleInputChange","event","target","value","style","marginLeft","className","styles","fields","text","Form","Control","type","input","onChange","button","handleSubmit","Group","controlId","as","map","com","Button","variant","buttons","update","onClick","delete","handleDelete","Table","striped","bordered","hover","width","marginTop","Check","borderBottom","row","handleIndexDelete","companyDetail","justifyContent","height","marginBottom","marginRight","float","CompanyList","React","handleEmployee","_companies","size","margin","checked","backgroundColor","src","logo","alt","img-src","websitelink","withRouter","match","params","images","setImages","handlePassData","length","push","e","img","files","URL","createObjectURL","handleFileUpload","to","color","Datatable","emloyees","setEmployees","LoginPage","setLogin","passsword","password","Label","placeholder","RegisterPage","Routes","exact","path","component","Company","App","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0252d9fd.chunk.js","sourcesContent":["let BASE_URL = process.env.REACT_APP_BASE_URL || 'http://localhost:3001';\n\nexport class ResponseError extends Error {\n    response:any;\n\n    constructor(response:any) {\n        super(response.statusText);\n        this.response = response;\n    }\n}\n/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response:any) {\n    if (response.status === 204 || response.status === 205) {\n        return null;\n    }\n    return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response:any) {\n    if (response.status >= 200 && response.status < 300) {\n        return response;\n    }\n\n    const error = new ResponseError(response);\n    error.response = response;\n    throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport default async function   request(\n    url:any,\n    options:any,\n){\n    // const token = localStorage.getItem('token');\n\n    const fetchResponse = await fetch(`${BASE_URL}${url}`, {\n        ...options,\n        \n        headers: {\n            'Content-type': 'application/json',\n            // Authorization: `Bearer ${token}`,\n        },\n    });\n  \n    const response = await checkStatus(fetchResponse);\n\n    return parseJSON(response);\n}\n\n","import request from '../utils/request';\n\nexport default () => ({\n    async createEmployee(data:any){\n        try{\n            const options ={\n                method:'POST',\n                body: JSON.stringify(data),\n            };\n            const response = await request(`/create/employee`,options);\n            // response.push(data)\n            alert(JSON.stringify(\"Employee created successfully\"));\n            return response;\n        } catch(error){\n            throw error;\n        }\n    },\n    async getAllEmployee(){\n        try{\n            const options ={\n                method:'GET',\n            };\n            const response = await request(`/getAll/employee`,options);\n            return response;\n        } catch(error){\n            throw error;\n        }\n    },\n    async deleteEmployee(employee:any){\n        let employeeId = employee._id\n        try{\n            const options ={\n                method:'DELETE',\n            };\n            const response = await request(`/delete/employee/${employeeId}`,options);\n            alert(JSON.stringify(\"Employee deleted successfully\"));\n            return response;\n        } catch(error){\n            throw error;\n        }\n    },\n    async updateEmployee(employee:any){\n        console.log(\"updating employee...\")\n        let employeeId = employee.id\n\n        try{\n            const options ={\n                method:'PUT',\n                body: JSON.stringify(employee),\n\n            };\n            const response = await request(`/update/employee/${employeeId}`,options);\n            alert(JSON.stringify(\"Employee updated successfully\"));\n            return response;\n        } catch(error){\n            throw error;\n        }\n    }\n})","import request from '../utils/request';\n\nexport default () => ({\n    async createCompany(data:any){\n        console.log(data)\n        try{\n            const options ={\n                method:'POST',\n                body: JSON.stringify(data),\n            };\n            const response = await request(`/create/company`,options);\n            alert(JSON.stringify(\"Company created successfully\"));\n            return response;\n        } catch(error){\n            throw error;\n        }\n    },\n    async deleteCompany(data:any){\n        let companyId = data._id\n        try{\n            const options ={\n                method:'DELETE',\n                body: JSON.stringify(data),\n            };\n            const response = await request(`/delete/company/${companyId}`,options);\n            alert(JSON.stringify(\"Company deleted successfully\"));\n            return response;\n        } catch(error){\n            throw error;\n        }\n    },\n    async updateCompany(data:any){\n        try{\n            const options ={\n                method:'PUT',\n                body: JSON.stringify(data),\n            };\n            const response = await request(`/create/company`,options);\n            alert(JSON.stringify(\"Company updated successfully\"));\n            return response;\n        } catch(error){\n            throw error;\n        }\n    },\n    async createUser(data:any){\n        try{\n            const options = {\n                method:'POST',\n                body:JSON.stringify(data),\n            };\n            const response = await request(`/register/User`,options)\n            alert(JSON.stringify(\"User created successfully\"));\n            return response;\n        } catch(error){\n            throw error;\n        }\n    },\n    async loginUser(data:any){\n        try{\n            const options = {\n                method:'GET',\n                // params:JSON.stringify(data),\n            };\n            const response = await request(`/login/User`,options)\n            alert(JSON.stringify(\"User Logged in successfully\"));\n            return response;\n        } catch(error){\n            throw error;\n        }\n\n    },\n    async getCompany(){\n        try{\n            const options ={\n                method:'GET',\n              \n            };\n            const response = await request(`/getAll/company`,options);\n            return response;\n        } catch(error){\n            throw error;\n        }\n    }\n})","import React, { useEffect, useState } from 'react';\nimport employeeService from '../Services/employee'\nimport companyService from '../Services/company'\nimport Form from 'react-bootstrap/Form';\nimport { useFormik } from \"formik\";\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\n\n\nconst Employees = (props: any) => {\n\n    //get companyId from companies component\n    let companyId = props.history.location.state\n\n    const [employees, setEployees] = useState<any>([])\n    const [edit, setEdit] = useState(false)\n    const [updatedEmply, setToUpdateEmply] = useState<any>({})\n    const [companies, setCompanies] = useState<any>([])\n    const [ check, setCheck] = useState<any>('')\n    const [ checked, setChecked]=useState<any>(false)\n\n\n    const formik = useFormik({\n        initialValues: {\n            firstName: '',\n            lastName: '',\n            email: '',\n            phone: '',\n            company: ''\n        },\n        onSubmit: values => {\n            createEmployee(values)\n        },\n\n\n    });\n    const service = employeeService()\n    const company_Service = companyService()\n\n    // get all employess\n    useEffect(() => {\n        async function getData() {\n            try {\n                let employees = await service.getAllEmployee()\n                setEployees(employees)\n                let companies = await company_Service.getCompany()\n                setCompanies(companies)\n            } catch (error) {\n                console.log(error.message)\n            }\n        }\n        getData()\n    }, []);\n\n    //create employee\n    const createEmployee = async (values: any) => {\n\n        //get company id usinf dropdown value\n        let data = [...companies]\n        let co_id = ''\n        data.forEach(element => {\n            if (element.name == values.company) {\n                co_id = element._id\n            } else {\n\n            }\n        });\n\n        try {\n            let _data = {\n                firstName: values.firstName,\n                lastName: values.lastName,\n                email: values.email,\n                phone: values.phone,\n                companyId: co_id\n            }\n            await service.createEmployee(_data) //API service for creating new employee\n            handleCreateEmployee()\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    //handling changes in employees state\n    const handleCreateEmployee = async () => {\n        try {\n            let response = await service.getAllEmployee()\n            setEployees(response)\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    const handleIndexDelete =(index:any) =>{\n        setCheck(index)\n        setChecked(true)\n       \n    }\n\n    //delete employee by Id\n    const handleDelete = () => {\n        let _employees = [...employees]\n        service.deleteEmployee(_employees[check])\n        handleCreateEmployee()\n        setChecked(false)\n\n    }\n\n\n    //Update anything about employee (1/3)\n    const handleChange = async () => {\n        let _employees = [...employees]\n        let index: any = _employees[check]\n        console.log(index.firstName)\n        setEdit(true)\n        setToUpdateEmply({\n            firstName: index.firstName,\n            lastName: index.lastName,\n            email: index.email,\n            phone: index.phone,\n            id: index._id\n        })\n    }\n\n    //Update anything about employee (2/3)\n    const updateEmployee = async () => {\n        setEdit(false)\n        await service.updateEmployee(updatedEmply)\n        handleCreateEmployee()\n\n    }\n\n    //Update anything about employee (3/3)\n    const handleInputChange = (event: any) => {\n        const { name, value } = event.target;\n        setToUpdateEmply({ ...updatedEmply, [name]: value });\n    };\n\n\n\n    return (\n        <div style={{ marginLeft: '50px' }} className=\"App\">\n            <h1>Employees List</h1>\n            {edit ? (<div>\n                <form onSubmit={updateEmployee}>\n\n                    <div style={styles.fields}>\n                        <span style={styles.text}>First Name:</span>\n                        <Form.Control name=\"firstName\"\n                            type=\"firstname\"\n                            style={styles.input}\n                            value={updatedEmply.firstName}\n                            onChange={handleInputChange}\n                        />\n                    </div>\n                    <div style={styles.fields}>\n                        <span style={styles.text}>Last Name:</span>\n                        <Form.Control\n                            name=\"lastName\"\n                            type=\"lastname\"\n                            style={styles.input}\n                            value={updatedEmply.lastName}\n                            onChange={handleInputChange}\n\n                        />\n                    </div>\n                    <div style={styles.fields}>\n                        <span style={styles.text}>Email:</span>\n                        <Form.Control\n                            name=\"email\"\n                            type=\"email\"\n                            style={styles.input}\n                            value={updatedEmply.email}\n                            onChange={handleInputChange}\n\n                        />\n                    </div>\n\n                    <div style={styles.fields}>\n                        <span style={styles.text}>Phone:</span>\n                        <Form.Control\n                            name=\"phone\"\n                            type=\"phone\"\n                            style={styles.input}\n                            value={updatedEmply.phone}\n                            onChange={handleInputChange}\n\n                        />\n                    </div>\n                    <button style={styles.button} type=\"submit\">Update</button>\n                </form>\n            </div>) :\n                <form onSubmit={formik.handleSubmit}>\n                    <div>\n                        <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                            <span style={styles.text}>Select Company:</span>\n                            <Form.Control as=\"select\"\n                                name=\"company\"\n                                type=\"company\"\n                                onChange={formik.handleChange}\n                                value={formik.values.company}\n                                style={styles.input}>\n                                {companies.map((com: any) => (\n\n                                    <option>{com.name}</option>\n                                ))}\n                            </Form.Control>\n                        </Form.Group>\n                    </div>\n\n                    <div style={styles.fields}>\n                        <span style={styles.text}>First Name:</span>\n                        <Form.Control name=\"firstName\"\n                            type=\"firstname\"\n                            style={styles.input}\n                            value={formik.values.firstName}\n                            onChange={formik.handleChange}\n                        />\n                    </div>\n                    <div style={styles.fields}>\n                        <span style={styles.text}>Last Name:</span>\n                        <Form.Control\n                            name=\"lastName\"\n                            type=\"lastname\"\n                            style={styles.input}\n                            value={formik.values.lastName}\n                            onChange={formik.handleChange}\n\n                        />\n                    </div>\n                    <div style={styles.fields}>\n                        <span style={styles.text}>Email:</span>\n                        <Form.Control\n                            name=\"email\"\n                            type=\"email\"\n                            style={styles.input}\n                            value={formik.values.email}\n                            onChange={formik.handleChange}\n\n                        />\n                    </div>\n\n                    <div style={styles.fields}>\n                        <span style={styles.text}>Phone:</span>\n                        <Form.Control\n                            name=\"phone\"\n                            type=\"phone\"\n                            style={styles.input}\n                            value={formik.values.phone}\n                            onChange={formik.handleChange}\n                        />\n                    </div>\n                    <Button variant=\"success\" style={styles.button} type=\"submit\">Submit</Button>\n                </form>\n\n            }\n\n            <div>\n                <div style={styles.buttons}>\n                <Button variant=\"warning\" style={styles.update} onClick={() => handleChange()}> Update</Button>\n                    <Button variant=\"danger\" style={styles.delete} onClick={() => handleDelete()}> Delete</Button>\n                </div>\n                <Table striped bordered hover style={{ width: '50%', marginTop: '50px' }}>\n                    <thead style={{ width: '50%' }}>\n                        <tr style={{ width: '50%' }}>\n\n                            <th><Form.Check type=\"checkbox\" /> </th>\n                            <th style={{ borderBottom: '1px solid #ccc' }}>company Name</th>\n                            <th style={{ borderBottom: '1px solid #ccc' }}>#</th>\n                            <th style={{ borderBottom: '1px solid #ccc' }}>First Name</th>\n                            <th style={{ borderBottom: '1px solid #ccc' }}>Last Name</th>\n                            <th style={{ borderBottom: '1px solid #ccc' }}>Email</th>\n                            <th style={{ borderBottom: '1px solid #ccc' }}>Phone</th>\n                        </tr>\n                    </thead>\n                    {employees ? employees.map((row: any, index: any) =>\n                        <tbody >\n                            <tr >\n                                <td>\n                                    <Form.Check type=\"checkbox\"  onClick={()=>handleIndexDelete(index)} />\n                                </td>\n                                <td>{row.companyDetail[0] ? row.companyDetail[0].name : 'apple'}</td>\n                                <td>{index + 1}</td>\n                                <td>{row.firstName}</td>\n                                <td>{row.lastName}</td>\n                                <td>{row.email}</td>\n                                <td>{row.phone}</td>\n                            </tr>\n                        </tbody>\n                    ) : <div style={{ justifyContent: 'center' }}>\n                            No data to show :(\n                        </div>}\n                </Table>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Employees;\n\nconst styles = {\n    fields: { height: '100%', width: '100%', marginBottom: '10px' },\n    text: { marginRight: '10px' },\n    input: { height: '100%', width: '20%' },\n    button: { height: '100%', width: '20%' },\n    update: { float: 'right' as 'right' },\n    delete: { float: 'left' as 'left'},\n    buttons: { width: '200px', float: 'right' as 'right', marginRight: '50%', marginBottom: 10 },\n} ","import React, { useEffect } from 'react';\nimport companyService from '../Services/company'\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\n\n\nconst CompanyList = () => {\n\n    const [companies, setCompanies]: any = React.useState([])\n    const [check, setCheck] = React.useState<any>('')\n\n    const service = companyService()\n\n    const handleIndexDelete = (index: any) => {\n        setCheck(index)\n\n    }\n    //delete company by id\n    const handleDelete = () => {\n        let _companies = [...companies]\n        console.log(_companies[check])\n        //calling API service for delete \n        service.deleteCompany(_companies[check])\n        handleEmployee()\n\n    }\n\n    const handleEmployee = async () => {\n        try {\n            let response = await service.getCompany()\n            setCompanies(response)\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    // get company\n    useEffect(() => {\n        async function getData() {\n            try {\n                let response = await service.getCompany() //api service for getting all companies\n                setCompanies(response)\n            } catch (error) {\n                console.log(error.message)\n            }\n        }\n        getData()\n    }, []);\n\n    return (\n        <div>\n            <h1 style={{ marginLeft: '5%', marginTop: 10, float: 'left' }}> Companies List </h1>\n            <Button variant=\"danger\" style={styles.delete} onClick={() => handleDelete()}> Delete</Button>\n            <div style={{ marginTop: 50 }}>\n                <Table striped bordered hover size=\"sm\" style={{ margin: 50, width: '80%' }} >\n                    <thead >\n                        <tr>\n                            <td>\n                                <Form.Check type=\"checkbox\" checked={false} />\n                            </td>\n                            <th style={{ borderBottom: '1px solid #ccc', backgroundColor: '#ccc' }}>Sr. Number</th>\n                            <th style={{ borderBottom: '1px solid #ccc', backgroundColor: '#ccc' }}>Company Name</th>\n                            <th style={{ borderBottom: '1px solid #ccc', backgroundColor: '#ccc' }}>Logo</th>\n                            <th style={{ borderBottom: '1px solid #ccc', backgroundColor: '#ccc' }}>Website</th>\n                            <th style={{ borderBottom: '1px solid #ccc', backgroundColor: '#ccc' }}>Email</th>\n                        </tr>\n                    </thead>\n\n                    {companies.map((row: any, index: any) =>\n\n                        <tbody id={index + 1} >\n                            <tr>\n                                <td>\n                                    <Form.Check type=\"checkbox\" onClick={() => handleIndexDelete(index)} />\n                                </td>\n                                <td>{index + 1}</td>\n                                <td>{row.name}</td>\n                                <td>\n                             \n                                    <img\n                                        style={{ height: 30, width: 30 }}\n                                        src={(row.logo || \"\")}\n                                        className=\"d-inline-block align-top\"\n                                        alt=\"img\"\n                                        img-src=\"blob\"\n                                    />\n                                   \n                                </td>\n                                <td>{row.websitelink}</td>\n                                <td>{row.email}</td>\n                            </tr>\n                        </tbody>\n                    )}\n                </Table>\n            </div>\n        </div>\n\n    )\n}\n\nexport default CompanyList;\n\nconst styles = {\n\n    delete: { float: 'right' as 'right', marginRight: '17%' },\n    buttons: { marginRight: '45%', marginBottom: 5 }\n\n} ","import React, { useEffect } from 'react';\nimport { useFormik } from \"formik\";\nimport { Link } from 'react-router-dom';\nimport companyService from '../Services/company'\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport CompanyList from '../CompanyList/index'\nimport { withRouter } from 'react-router-dom';\nimport  BASE_URL from '../utils/request'\n\n\n\nconst Company = (props: any, { history, match }: any) => {\n    const { id } = props.match.params;\n\n    const [images , setImages ]:any =React.useState()\n\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            email: '',\n            logo: '',\n            websitelink: ''\n\n        },\n        onSubmit: values => {\n            alert(JSON.stringify(values, null, 2));\n            createCompany(values)\n        },\n\n    });\n\n    const service = companyService()\n\n    //create company\n    const createCompany = async (values: any) => {\n        try {\n            let _data = {\n                name: values.name,\n                email: values.email,\n                logo: images,\n                websitelink: values.websitelink\n            }\n\n            console.log(_data)\n            await service.createCompany(_data)\n            handlePassData()\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    //passing companyId to create new employee \n    const handlePassData = async () => {\n        let response = await service.getCompany()\n        let companyId = response[response.length - 1]._id\n        props.history.push('/employees', { companyId: companyId }) //passes companyId to employee component\n    }\n\n    const handleFileUpload = (event:any)=>{\n        let img = event.target.files[0]\n        setImages(URL.createObjectURL(img))\n    }\n\n\n    return (\n        <div>\n            <form onSubmit={formik.handleSubmit}>\n                <div className=\"App\" style={{ marginLeft: '5%' }}>\n                    <h1>Company Form</h1>\n                    <div style={styles.fields}>\n                        <span style={styles.text}>Company Name:</span>\n                        <Form.Control name=\"name\" type=\"companyName\" style={styles.input} onChange={formik.handleChange} />\n                    </div>\n                    <div style={styles.fields}>\n                        <span style={styles.text}>Email:</span>\n                        <Form.Control name=\"email\" type=\"email\" style={styles.input} onChange={formik.handleChange} />\n                    </div>\n\n                    <div style={styles.fields}>\n                        <span style={styles.text}>Logo:</span>\n                        <Form.Control id=\"file\" name=\"logo\" type=\"file\" style={styles.input} \n                        onChange={(e)=>handleFileUpload(e)} \n                        // onChange={formik.handleChange}\n                        className=\"form-control\" />\n                    </div>\n                    <div style={styles.fields}>\n                        <span style={styles.text}>Website:</span>\n                        <Form.Control name=\"websitelink\" type=\"website\" style={styles.input} onChange={formik.handleChange} />\n                    </div>\n                    <Button\n                        style={styles.button}\n                        type=\"submit\"\n                        onClick={() => formik.handleSubmit}\n                    >Add and Next</Button>\n\n                    <Link to={'/employees'}>\n                        <Button style={styles.button}> Employees</Button>\n                    </Link>\n                </div>\n            </form>\n            <CompanyList />\n        </div>\n\n    )\n}\n    \nexport default withRouter(Company);\n\nconst styles = {\n    fields: { height: '100%', width: '100%', marginBottom: '10px' },\n    text: { marginRight: '10px' },\n    input: { height: '100%', width: '20%' },\n    button: { color: 'white', marginLeft: 10 }\n}\n\n","import React, { useState, useEffect } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport employeeService from '../Services/employee'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Link } from 'react-router-dom';\n\n\nconst Datatable = () => {\n    const service = employeeService()\n\n    const [emloyees, setEmployees]: any = React.useState([])\n\n    useEffect(() => {\n        async function getData() {\n            try {\n                let response = await service.getAllEmployee()\n                // console.log(\"response\", response)\n                setEmployees(response)\n            } catch (error) {\n                console.log(error.message)\n            }\n        }\n        getData()\n    }, []);\n\n\n    return (\n        <div>\n            <div style={{width:'100%'}}>\n            <h1 style={{margin:20}}>Companies and Employees</h1>\n            <Link to=\"/companies\">\n            <button style={{float:'right',marginRight:30,marginBottom:10}}>Go to Companies</button>\n            </Link>\n            </div>\n            <div style={{margin:30}}>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th style={{borderBottom:'1px solid #ccc'}}>company Name</th>\n                            <th style={{borderBottom:'1px solid #ccc'}}>#</th>\n                            <th style={{borderBottom:'1px solid #ccc'}}>First Name</th>\n                            <th style={{borderBottom:'1px solid #ccc'}}>Last Name</th>\n                            <th style={{borderBottom:'1px solid #ccc'}}>Email</th>\n                            <th style={{borderBottom:'1px solid #ccc'}}>Phone</th>\n                        </tr>\n                    </thead>\n                    {emloyees.map((row: any,index:any) =>           \n                        <tbody >         \n                            <tr>                        \n                                <td>{row.companyDetail[0]?row.companyDetail[0].name:''}</td>\n                                <td>{index+1}</td>\n                                <td>{row.firstName}</td>\n                                <td>{row.lastName}</td>\n                                <td>{row.email}</td>\n                                <td>{row.phone}</td>\n                            </tr>\n                        </tbody>\n                    \n                    )}\n\n                </Table>\n            </div>\n        </div>\n    )\n}\n\nexport default Datatable;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport { useFormik } from \"formik\";\nimport companyService from '../Services/company'\nimport { setFlagsFromString } from 'v8';\n\n\nconst LoginPage =(props:any)=>{\n\n    const [login , setLogin]=React.useState(false)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            passsword: ''\n\n        },\n        onSubmit: values => {\n            alert(JSON.stringify(values, null, 2));\n            loginUser(values)\n        },\n\n    });\n\n    const service = companyService()\n\n    const loginUser = async (values: any) => {\n\n        try {\n            let _data = {      \n                email: values.email,\n                password: values.password\n            }\n            await service.loginUser(_data)\n            setLogin(true)\n            \n            props.history.push('/Datatable')\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    \n\n    return(\n        <div style={{width:'50%',margin:'0 auto'}}>\n            <h3>Login Here</h3>\n            <Form onSubmit={formik.handleSubmit}>\n                <Form.Group controlId=\"formGroupEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control name=\"email\" type=\"email\" placeholder=\"Enter email\" onChange={formik.handleChange}/>\n                </Form.Group>\n                <Form.Group controlId=\"formGroupPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control name=\"password\" type=\"password\" placeholder=\"Password\" onChange={formik.handleChange}/>\n                </Form.Group>\n                \n                {/* <Link to=\"/Datatable\"> */}\n                    <Button type=\"submit\" onClick={() => formik.handleSubmit} >Login</Button>\n                {/* </Link> */}\n            </Form>\n        </div>\n    )\n      \n    \n\n}\nexport default LoginPage;","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport { useFormik } from \"formik\";\nimport companyService from '../Services/company'\n\n\nconst RegisterPage = () => {\n\n\n\n    const formik = useFormik({\n        initialValues: {\n            firstName: '',\n            lastName: '',\n            email: '',\n            passsword: ''\n\n        },\n        onSubmit: values => {\n            alert(JSON.stringify(values, null, 2));\n            createUser(values)\n        },\n\n    });\n\n    const service = companyService()\n\n    const createUser = async (values: any) => {\n\n        try {\n            let _data = {\n                firstName: values.firstName,\n                lastName: values.lastName,\n                email: values.email,\n                password: values.password\n            }\n\n            await service.createUser(_data)\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    return (\n        <div style={{ width: '50%', margin: '0 auto' }}>\n            <h3>Register Here</h3>\n            <form onSubmit={formik.handleSubmit}>\n                <div >\n                    <Form.Label>First Name</Form.Label>\n                    <Form.Control name=\"firstName\" type=\"firstName\" placeholder=\"First Name\" onChange={formik.handleChange} />\n                </div>\n                <Form.Group >\n                    <Form.Label>Last Name</Form.Label>\n                    <Form.Control name=\"lastName\" type=\"lastName\" placeholder=\"Last Name\" onChange={formik.handleChange} />\n                </Form.Group>\n                <Form.Group >\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control name=\"email\" placeholder=\"Enter email\" onChange={formik.handleChange} />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control name=\"password\" type=\"password\" placeholder=\"Password\" onChange={formik.handleChange} />\n                </Form.Group>\n                    <Button type=\"submit\" onClick={() => formik.handleSubmit}>Register</Button>\n                <div style={{float:'right',backgroundColor:'green'}}>\n                 \n                 <Link to=\"/login\">\n                 <Button onClick={() => formik.handleSubmit}>Go to Login</Button>\n                </Link>\n                </div>\n            </form>\n        </div>\n    )\n\n\n\n}\nexport default RegisterPage;","import React from 'react'\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\n//components\nimport Employees from '../Employess/index'\nimport Company from '../Company/index'\nimport Datatable from '../Datatable/index'\nimport CompanyList from '../CompanyList/index'\nimport LoginPage from '../LoginPage/index'\nimport RegisterPage from '../RegisterPage/index'\n\nconst Routes=()=>{\n    return(\n        <main>\n            <BrowserRouter>\n        <Switch>\n        <Route exact path=\"/\" component={RegisterPage} />\n        <Route exact path=\"/login\" component={LoginPage} />\n\n        <Route exact path=\"/Datatable\" component={Datatable} />\n        <Route exact path=\"/employees\" component={Employees} />\n        <Route exact path=\"/companies\" component={Company} />\n        <Route exact path='/list' component={CompanyList}/>\n      </Switch>\n      </BrowserRouter>\n      </main>\n    )\n}\nexport default Routes;","import React from 'react';\nimport Routes from './Routes/index'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <Routes/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}